/*
* Each new term in the Fibonacci sequence is generated by adding the previous two terms.
* By starting with 1 and 2, the first 10 terms will be:
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* By considering the terms in the Fibonacci sequence whose values do not exceed four million,
* find the sum of the even-valued terms.
*
* output should be 4613732
*/

object Problem002 extends App {
  /*
  * Commented below are 2 "textbook" fibonacci sequence Scala solutions
  * #:: is shorthand for Stream.cons in this case, so Stream.cons(0, Stream.cons(1, fib.zip...
  * these use tail recursion to create a LazyList of infinite fibonacci values
  * map collapsing the zip and tail and adding to create the fibonacci value
  * val fib:LazyList[Int] = 0 #:: 1 #:: (fib zip fib.tail).map{ t => t._1 + t._2 }
  * lazy val fib: LazyList[Int] = 0 #:: 1 #:: fib.zip(fib.tail).map { case (a, b) => a + b }
  * however, the implementation can be made more simple
  */
  
  //how this works, add element to previous element, create new element with sum, increment and iterate.
  //QED: Definition of Fib Sequence.
  //Above solutions are more explicit, which may or may not make them better.
  val fib: LazyList[Int] = 0 #:: fib.scanLeft(1)(_ + _)
  val result = fib.view.takeWhile(_ <= 4000000).filter(_ % 2 == 0).sum
  println(result)
}
